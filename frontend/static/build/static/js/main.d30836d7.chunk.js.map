{"version":3,"sources":["components/LoginForm.js","components/RegisterForm.js","components/ChatForm.js","App.js","serviceWorker.js","index.js"],"names":["LoginForm","props","state","username","password","handleChange","bind","event","this","setState","target","name","value","Fragment","className","onSubmit","logIn","htmlFor","type","id","onChange","Component","RegisterForm","email","password1","password2","registerUser","Chat","chats","map","chat","key","message","ChatForm","user","onClick","logOut","postChat","App","display","isLoggedIn","Cookies","get","fetchMessages","setInterval","fetch","then","response","json","data","catch","error","console","log","preventDefault","csrftoken","method","headers","body","JSON","stringify","set","detail","remove","html","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d30836d7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './LoginForm.css'\n\nclass LoginForm extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      username:'',\n      // email: '',\n      password:'',\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange(event){\n    this.setState({[event.target.name]: event.target.value});\n  }\n  render(){\n    return(\n      <React.Fragment>\n      <form className=\"col-12 col-md-6\" onSubmit={(event) => this.props.logIn(event, this.state)}>\n        <h5 className=\"Register\">Log in</h5>\n        <div className=\"form-group\">\n          <label htmlFor=\"username\">Username</label>\n          <input type='text' className=\"form-control\" id=\"username\" name=\"username\" value={this.state.username} onChange={this.handleChange}/>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password\">Password</label>\n          <input type='text' className=\"form-control\" id=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange}/>\n        </div>\n        <div className=\"create-Account-Btn\">\n          <button className=\"btn btn-primary\">Log in</button>\n        </div>\n      </form>\n      </React.Fragment>\n    )\n  }\n}\nexport default LoginForm;\n","import React, { Component } from 'react';\n\n\nclass RegisterForm extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      username: '',\n      email: '',\n      password1:'',\n      password2:'',\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n  handleChange(event){\n    this.setState({[event.target.name]: event.target.value});\n  }\n  render(){\n    return(\n      <form className=\"col-12 col-md-6\" onSubmit={(event) => this.props.registerUser(event, this.state)}>\n        <h5 className=\"Register\">Create Account</h5>\n        <div className=\"form-group\">\n          <label htmlFor=\"username\">Username</label>\n          <input type='text' className=\"form-control\" id=\"username\" name=\"username\" value={this.state.username} onChange={this.handleChange}/>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email Address</label>\n          <input type='text' className=\"form-control\" id=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange}/>\n          <small className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password1\">Password</label>\n          <input type='text' className=\"form-control\" id=\"password1\" name=\"password1\" value={this.state.password1} onChange={this.handleChange}/>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password2\">Confirm Password</label>\n          <input type='text' className=\"form-control\" id=\"password2\" name=\"password2\" value={this.state.password2} onChange={this.handleChange}/>\n        </div>\n        <div className=\"create-Account-Btn\">\n          <button className=\"btn btn-primary\">Register</button>\n        </div>\n      </form>\n    )\n  }\n}\nexport default RegisterForm;\n","import React, { Component } from 'react';\nimport './ChatForm.css'\n\nfunction Chat(props){\n  const chats = props.chats.map(chat => <li className=\"list-group-item mt-3\"key={chat.id}>{chat.message}</li>);\n  return(\n    <div>\n     {chats}\n    </div>\n  )\n}\n\nclass ChatForm extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      user:'',\n      message: '',\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n  handleChange(event){\n    this.setState({[event.target.name]: event.target.value});\n  }\n  render(){\n    return(\n      <React.Fragment>\n      <button onClick={this.props.logOut} type='button'>Log out</button>\n      <div className=\"form mt-5\" onSubmit={(event) => this.props.postChat(event, this.state)}>\n        <form className=\"col-12 col-md-6\">\n          <div className=\"form-group\">\n            <label htmlFor=\"message\">Message</label>\n            <input type='text' className=\"form-control\" id=\"message\" name=\"message\" value={this.state.message} onChange={this.handleChange}/>\n          </div>\n            <button className=\"btn btn-primary\">Post Message</button>\n        </form>\n      </div>\n      <Chat chats={this.props.chats}/>\n      </React.Fragment>\n    )\n  }\n}\nexport default ChatForm\n","import React, { Component } from 'react';\nimport LoginForm from './components/LoginForm'\nimport RegisterForm from './components/RegisterForm'\nimport ChatForm from './components/ChatForm'\nimport Cookies from 'js-cookie';\nimport './App.css'\n\nimport './App.css';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      chats: [],\n      display: 'register',\n      isLoggedIn: Cookies.get('Authorization')? true: false,\n    }\n    this.registerUser = this.registerUser.bind(this)\n    this.logIn = this.logIn.bind(this)\n    this.postChat = this.postChat.bind(this)\n    this.logOut = this.logOut.bind(this)\n    this.fetchMessages = this.fetchMessages.bind(this)\n  }\n  componentDidMount(){\n    this.fetchMessages();\n    setInterval(this.fetchMessages, 1000);\n  }\n  fetchMessages(){\n    const isLoggedIn = this.state.isLoggedIn;\n    if(isLoggedIn === true){\n      fetch('/api/v1/chats/')\n      .then(response => response.json())\n      .then(data => this.setState({chats: data}))\n      .catch(error => console.log('Error:', error));\n    }\n  }\n\n  postChat(event, data){\n    event.preventDefault();\n    const csrftoken = Cookies.get('csrftoken');\n    fetch('/api/v1/chats/', {\n      method:'POST',\n      headers: {\n        'X-CSRFToken': csrftoken,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n    .then(response => response.json())\n    .then(data => {\n        const chats = [...this.state.chats, data];\n        this.setState({chats})\n    })\n    .catch(error => console.log('Error:', error));\n  }\n\n  logIn(event, data){\n    event.preventDefault();\n    const csrftoken = Cookies.get('csrftoken');\n    fetch('/api/v1/rest-auth/login/', {\n      method:'POST',\n      headers:{\n        'X-CSRFToken': csrftoken,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n    .then(response => response.json())\n    .then(data => {if(data.key){\n        Cookies.set('Authorization', `Token ${data.key}`);\n        this.setState({isLoggedIn:true})\n      }})\n    .catch(error => console.log('Error:', error));\n  }\n\n  registerUser(event, data){\n    event.preventDefault();\n    const csrftoken = Cookies.get('csrftoken');\n    fetch('/api/v1/rest-auth/registration/', {\n      method:'POST',\n      headers: {\n        'X-CSRFToken': csrftoken,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n    .then(response => response.json())\n    .then(data => {if(data.key){\n        Cookies.set('Authorization', `Token ${data.key}`);\n        this.setState({isLoggedIn:true})\n      }})\n    .catch(error => console.log('Error:', error));\n  }\n\n  logOut(){\n    const csrftoken = Cookies.get('csrftoken');\n    fetch('/api/v1/rest-auth/logout/', {\n      method: 'POST',\n      headers: {\n        'X-CSRFToken': csrftoken,\n        'Content-Type': 'application/json',\n      }\n    })\n    .then(response => response.json())\n    .then(data => {if(data.detail === 'Successfully logged out.'){\n          Cookies.remove('Authorization');\n          this.setState({isLoggedIn:false})\n        }})\n    .catch(error => console.log('Error:', error));\n  }\n\n\n  // async handleLogout(){\n  //   const options = {\n  //     method:'POST',\n  //     headers: {\n  //       'X-CSRFToken': Cookies.get('csrftoken'),\n  //       'Content-Type': 'application/json',\n  //     },\n  //   };\n  //\n  //   const handleError = (err) => console.warn(err);\n  //   const response = await fetch('/api/v1/rest-auth/logout/', options)\n  //   const data = await response.json().catch(handleError)\n  //\n  //   if(data.detail === 'Successfully logged out.'){\n  //     Cookies.remove('Authorization');\n  //   }\n\n\n\n  // async registerUser(e, obj){\n  //   e.preventDefault();\n  //\n  //   const options = {\n  //     method:'POST',\n  //     headers: {\n  //       'X-CSRFToken': Cookies.get('csrftoken'),\n  //       'Content-Type': 'application/json',\n  //     },\n  //     body: JSON.stringify(obj),\n  //   };\n  //\n  //   const handleError = (err) => console.warn(err);\n  //   const response = await fetch('/api/v1/rest-auth/registration/', options)\n  //   const data = await response.json().catch(handleError)\n  //\n  //   if(data.key){\n  //     Cookies.set('Authorization', `Token ${data.key}`);\n  //   }\n  // }\n\n  render(){\n     console.log(this.state.isLoggedIn);\n    let html;\n    const display = this.state.display;\n    if(display === 'register'){\n      html = <div className=\"form\"><RegisterForm registerUser={this.registerUser}/></div>\n    } else if(display === 'login') {\n      html = <div className=\"form\"><LoginForm logIn={this.logIn}/></div>\n    }\n    let chat;\n    const isLoggedIn = this.state.isLoggedIn;\n    if(isLoggedIn === true){\n      chat = <ChatForm chats={this.state.chats} postChat={this.postChat} logOut={this.logOut}/>\n    }\n    else {\n      chat = ''\n    }\n    return(\n      <React.Fragment>\n      {isLoggedIn === false?<div className=\"mt-5\">\n        {html}\n        <div className=\"form\">\n          <button onClick={() => this.setState({display:'login'})} type='button'className=\"btn btn-link\">Already have an account?</button>\n          <button onClick={() => this.setState({display:'register'})} type='button'className=\"btn btn-link\">Don't have an account?</button>\n        </div>\n      </div>\n      : <div>{chat}</div>\n      }\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}