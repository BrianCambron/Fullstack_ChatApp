{"version":3,"sources":["components/LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["LoginForm","props","state","username","email","password1","password2","hasAccount","handleClick","bind","handleChange","this","setState","event","target","name","value","Fragment","className","onSubmit","registerUser","htmlFor","type","id","onChange","onClick","logIn","Component","App","chats","data","preventDefault","csrftoken","Cookies","get","fetch","method","headers","body","JSON","stringify","then","response","json","console","log","catch","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d02017ca.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './LoginForm.css'\n\nclass LoginForm extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      username: '',\n      email: '',\n      password1:'',\n      password2:'',\n      hasAccount: false,\n    }\n    this.handleClick = this.handleClick.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n  }\n  handleClick(){\n    if(this.state.hasAccount === true){\n        this.setState({hasAccount: false})\n    }\n    else{\n      this.setState({hasAccount: true})\n    }\n  }\n  handleChange(event){\n    this.setState({[event.target.name]: event.target.value});\n  }\n  render(){\n    const hasAccount = this.state.hasAccount;\n    return(\n      <React.Fragment>\n      {hasAccount === false?\n      <form className=\"col-12 col-md-6\" onSubmit={(event) => this.props.registerUser(event, this.state)}>\n        <h5 className=\"Register\">Create Account</h5>\n        <div className=\"form-group\">\n          <label htmlFor=\"username\">Username</label>\n          <input type='text' className=\"form-control\" id=\"username\" name=\"username\" value={this.state.username} onChange={this.handleChange}/>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"email\">Email Address</label>\n          <input type='text' className=\"form-control\" id=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange}/>\n          <small className=\"form-text text-muted\">We'll never share your email with anyone else.</small>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password1\">Password</label>\n          <input type='text' className=\"form-control\" id=\"password1\" name=\"password1\" value={this.state.password1} onChange={this.handleChange}/>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password2\">Confirm Password</label>\n          <input type='text' className=\"form-control\" id=\"password2\" name=\"password2\" value={this.state.password2} onChange={this.handleChange}/>\n        </div>\n        <div className=\"create-Account-Btn\">\n          <button className=\"btn btn-primary\">Register</button>\n          <button onClick={this.handleClick}className=\"btn btn-link\">Already have an account?</button>\n        </div>\n      </form>\n      : <form className=\"col-12 col-md-6\" onSubmit={(event) => this.props.logIn(event, this.state)}>\n        <h5 className=\"Register\">Log in</h5>\n        <div className=\"form-group\">\n          <label htmlFor=\"username\">Username</label>\n          <input type='text' className=\"form-control\" id=\"username\" name=\"username\" value={this.state.username} onChange={this.handleChange}/>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"password1\">Password</label>\n          <input type='text' className=\"form-control\" id=\"password1\" name=\"password1\" value={this.state.password1} onChange={this.handleChange}/>\n        </div>\n        <div className=\"create-Account-Btn\">\n          <button className=\"btn btn-primary\">Log in</button>\n          <button onClick={this.handleClick}className=\"btn btn-link\">Don't have an account?</button>\n        </div>\n      </form>\n      }\n      </React.Fragment>\n    )\n  }\n}\nexport default LoginForm;\n","import React, { Component } from 'react';\nimport LoginForm from './components/LoginForm'\nimport Cookies from 'js-cookie';\nimport './App.css'\n\nimport './App.css';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      chats: [],\n    }\n    this.registerUser = this.registerUser.bind(this)\n    this.logIn = this.logIn.bind(this)\n  }\n  // componentDidMount(){\n  //   fetch('/api/v1/chats/')\n  //   .then(response => response.json())\n  //   .then(data => this.setState({chats: data}))\n  //   .catch(error => console.log('Error:', error));\n  // }\n  logIn(event, data){\n    event.preventDefault();\n    const csrftoken = Cookies.get('csrftoken');\n    fetch('/api/v1/rest-auth/login/', {\n      method:'POST',\n      headers:{\n        'X-CSRFToken': csrftoken,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.log('Error:', error));\n  }\n\n  registerUser(event, data){\n    event.preventDefault();\n    const csrftoken = Cookies.get('csrftoken');\n    fetch('/api/v1/rest-auth/registration/', {\n      method:'POST',\n      headers: {\n        'X-CSRFToken': csrftoken,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(error => console.log('Error:', error));\n  }\n\n  render(){\n    return(\n      <div className=\"form mt-5\">\n        <LoginForm registerUser={this.registerUser} logIn={this.logIn}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}